页面元素定位
常用的定位方法：id, name, class, tag, link, xpath, css
xpath定位
（1）xpath是根据绝对路径来定位元素，从html的根节点开始查找，好处在于定位准确，基本上能解决所有定位不到的难题，能够检测页面元素是否发生变化。 缺点是，元素一旦发生变化，可能会造成原先有效的Xpath表达式失效。

（2）xpath也可使用相对路径进行元素定位
相对路径的每一步都根据当前节点集之中的节点来进行计算，起始于双斜杠//
例如：find_element_by_xpath(@value = “查询”)
不管页面发生了什么变化，只要input标签的value值没有发生变化始终都可以定位到。

（3）使用索引号
索引号表示某个被定位的页面元素在其父元素节点下的同名元素中的位置序号，需要从1开始。
这种方式需要注意的是，网页html代码中是否包含了多个层级相同的代码结构
如果想同时定位多个相同input页面元素，可以使用下面的语句：
inputlist= driver.find_elements_by_xpath(“input[1]”)
将定位的多个元素存储到list对象中，然后根据列表的索引号获取想要的页面元素，如果页面元素经常增加或减少，不建议用索引号的方式来定位元素。

（4）使用页面元素的属性值来定位元素
例如：定位页面中的第一张img元素
//img[@alt = “div1-img1”]
如果能确认元素的属性值不变并且唯一，强烈建议使用相对路径在结合属性的定位方式来编写xpath定位表达式。

（5）使用逻辑运算符
如果一个属性不能唯一的区分一个元素，我们可以使用逻辑运算符连接多个属性来查找元素。
例如：find_element_by_xpath(“//input[@id=‘kw’ and @class=‘su’]/span/input”)

(6)使用模糊属性值定位元素
页面元素的属性值是动态的，每次访问都不一样，可使用该方式进行定位。
例如： //img[start-with(@alt,'div1')] # 查找属性alt的属性值以'div1'关键字开始的页面元素
//img[contains(@alt,'img')]  # 查找属性alt的属性值包含img关键字的页面元素，只要包含即可，无需考虑位置
contains函数属于高级用法，使用场景比较多，尽管元素进程变化，但只要属性值有几个固定不变的关键词就可以使用该方法。

（6）使用页面元素的文本定位元素
通过text()函数可以定位到元素文本包含某些关键字内容的页面元素
例如：
sogou_a = driver.find_element_by_xpath('// text()= '搜狗搜索']')
sogou_a = driver.find_element_by_xpath('//a[. = '搜狗搜索']') # .等价于text()
这两种方式是精准匹配
